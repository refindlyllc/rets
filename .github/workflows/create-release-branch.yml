name: Create Release Branch
on:
  workflow_dispatch:
    inputs:
#      semver:
#        description: 'major|minor|patch'
#        required: true
      versionCode:
        description: 'Version number (1.1.0)'
        required: true

jobs:
  createrelease:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Get current tag version
      id: get_tag
      run: |
        git describe --tags $(git rev-list --tags --max-count=1)
        echo ::set-output name=current_version::$(git describe --tags $(git rev-list --tags --max-count=1))

#    - name: Split version code
#      id: split_version
#      uses: jungwinter/split@v1
#      with:
#        msg: echo ${{steps.get_tag.outputs.current_version }}
#
#    - name: Bump release version
#      id: next_version
#      run: |
#        # Build array from version string.
#        if [[ "${{ github.event.inputs.semver }}" == "major" ]]; then echo major: ${{ steps.split.outputs._0 }}
#        fi
#        if [[ "${{ github.event.inputs.semver }}" == "minor" ]]; then echo minor: ${{ steps.split.outputs._1 }}
#        fi
#        if [[ "${{ github.event.inputs.semver }}" == "patch" ]]; then echo patch: ${{ steps.split.outputs._2 }}
#        fi
#
#        echo ::set-output name=next_version::${{ steps.split.outputs._0 }.${{ steps.split.outputs._1 }}.${{ steps.split.outputs._2 }}
#      uses: zwaldowski/semver-release-action@v1
#      with:
#        dry_run: true
#        bump: ${{ github.event.inputs.semver }}
#        github_token: ${{ secrets.GITHUB_TOKEN }}
#      uses: HardNorth/github-version-generate@v1.1.1

#    - name: Test
#      run: |
#        echo current version ${{steps.get_tag.outputs.current_version }}
#        echo next version "${{ steps.next_version.outputs.next_version }}"
    - name: Create release branch
      run: git checkout -b release/${{ github.event.inputs.versionCode }} #${{steps.get_tag.outputs.current_version }}
    - name: Initialize mandatory git config
      run: |
       git config user.name "GitHub Actions"
       git config user.email noreply@github.com
    - name: Change version number
      run: printf '__version__ = ${{ github.event.inputs.versionCode }}' > version.py
    - name: Update Changelog
      uses: thomaseizinger/keep-a-changelog-new-release@v1
      with:
        version: ${{ github.event.inputs.versionCode }}
    - name: Commit changelog and manifest files
      id: make-commit
      run: |
        git add version.py
        git commit --message "Prepare release ${{ github.event.inputs.versionCode }}"
        echo "::set-output name=commit::$(git rev-parse HEAD)"
    - name: Push new branch
      run: git push origin release/${{ github.event.inputs.versionCode }}
    - name: Create pull request into master
      uses: thomaseizinger/create-pull-request@1.0.0
      with:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       head: release/${{ github.event.inputs.versionCode }}
       base: master
       title: ${{ github.event.inputs.versionCode }} into master
       reviewers: ${{ github.event.issue.user.login }}
       body: |
           Hi!
           This PR was created in response workflow running.
           I've updated the version name and code commit: ${{ steps.make-commit.outputs.commit }}.
    - name: Create pull request to develop
      uses: thomaseizinger/create-pull-request@1.0.0
      with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          head: release/${{ github.event.inputs.versionCode }}
          base: development
          title: ${{ github.event.inputs.versionCode }} into develop
          reviewers: ${{ github.event.issue.user.login }}
          body: |
              Hi!
              This PR was created in response workflow running.
              I've updated the version name and code commit: ${{ steps.make-commit.outputs.commit }}.