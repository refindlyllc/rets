name: "Publish new release"

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  release:
    name: Publish new release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true # only merged pull requests must trigger this job
    steps:
      - name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create Release
        uses: thomaseizinger/create-release@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          release_name: release ${{ env.RELEASE_VERSION }}
          tag_name: ${{ env.RELEASE_VERSION }}
          name: release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false

#      - name: Merge master into dev branch
#        uses: thomaseizinger/create-pull-request@1.0.0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          head: master
#          base: dev
#          title: Merge master into dev branch
#          body: |
#            This PR merges the master branch back into dev.
#            This happens to ensure that the updates that happend on the release branch, i.e. CHANGELOG and manifest updates are also present on the dev branch.

      # if needed, you can checkout the latest master here, build artifacts and publish / deploy them somewhere
      # the create-release action has an output `upload_url` output that you can use to upload assets

#            - name: Slack notify
#              uses: rtCamp/action-slack-notify@master
#              env:
#                SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OVER_APP }}
#                SLACK_CHANNEL: #over-app-android
#                SLACK_TITLE: ðŸš¨ Version ${{ env.VERSION_NAME }} is being published to Google Play Internal Test
#                SLACK_MESSAGE: ${{ steps.extract_release_notes.outputs.release_notes }}
#                MSG_MINIMAL: true